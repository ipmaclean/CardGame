#pragma checksum "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c44821a159754bbbc0199680d8cd073463a89ab4"
// <auto-generated/>
#pragma warning disable 1591
namespace CardGame.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using CardGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using CardGame.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
#nullable restore
#line 4 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
  
    var values = new string[] { "A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K" };
    var suits = new string[] { "C", "D", "H", "S" };

    foreach (string suit in suits)
    {
        foreach (string value in values)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(0, "link");
            __builder.AddAttribute(1, "rel", "preload");
            __builder.AddAttribute(2, "href", "images/cards/" + (
#nullable restore
#line 12 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                     string.Format("{0}{1}", value, suit)

#line default
#line hidden
#nullable disable
            ) + ".png");
            __builder.AddAttribute(3, "as", "image");
            __builder.CloseElement();
#nullable restore
#line 13 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(4, "<h1>WAR!</h1>\r\n\r\n");
            __builder.AddMarkupContent(5, "<p>The goal is to be the first player to win all 52 cards</p>\r\n\r\n");
            __builder.AddMarkupContent(6, "<h3>The Deal</h3>\r\n");
            __builder.AddMarkupContent(7, "<p>The deck is divided evenly, with each player receiving 26 cards, dealt one at a time, face down. Anyone may deal first. Each player places their stack of cards face down, in front of them.</p>\r\n\r\n");
            __builder.AddMarkupContent(8, "<h3>The Play</h3>\r\n");
            __builder.AddMarkupContent(9, "<p>Each player turns up a card at the same time and the player with the higher card takes both cards and puts them, face down, on the bottom of his stack. </p>\r\n\r\n");
            __builder.AddMarkupContent(10, @"<p>If the cards are the same rank, it is War. Each player turns over two cards face down then chooses (clicks) one to turn face up. The player with the higher cards takes both piles (six cards). If the turned-up cards are again the same rank, each player places another card face down and turns another card face up. The player with the higher card takes all 10 cards, and so on. </p>

");
            __builder.AddMarkupContent(11, "<h3>The End</h3>\r\n");
            __builder.AddMarkupContent(12, "<p>The game ends when one player has won all the cards.</p>\r\n\r\n\r\n");
            __builder.OpenElement(13, "div");
            __builder.AddContent(14, "Computer Deck (");
            __builder.AddContent(15, 
#nullable restore
#line 33 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                     Computer.Deck.Cards.Count

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(16, "):");
            __builder.CloseElement();
            __builder.AddMarkupContent(17, "\r\n\r\n");
            __builder.OpenElement(18, "div");
            __builder.AddAttribute(19, "class", "in-play-area d-inline-block");
            __builder.OpenElement(20, "img");
            __builder.AddAttribute(21, "class", "playing-card");
            __builder.AddAttribute(22, "src", "/images/cards/" + (
#nullable restore
#line 36 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                   Computer.Deck.Cards.Any() ? Computer.Deck.Cards.Last().BackImage : "blank.png"

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(23, "title", "The computer\'s deck");
            __builder.AddAttribute(24, "alt", "back of card");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(25, "\r\n\r\n");
            __builder.OpenElement(26, "div");
            __builder.AddAttribute(27, "class", "in-play-area d-inline-block");
#nullable restore
#line 40 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
     if (Computer.InPlay.Cards.Any())
    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(28, "<span class=\"mr-2\">Battle Zone!</span>");
#nullable restore
#line 43 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        foreach (Card card in Computer.InPlay.Cards)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(29, "img");
            __builder.AddAttribute(30, "class", "playing-card");
            __builder.AddAttribute(31, "src", "/images/cards/" + (
#nullable restore
#line 45 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                           card.IsFaceUp ? card.FrontImage : card.BackImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(32, "title", 
#nullable restore
#line 45 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                       card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(33, "alt", 
#nullable restore
#line 45 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                                                                                   card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 46 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(34, "\r\n\r\n");
            __builder.OpenElement(35, "div");
            __builder.AddAttribute(36, "class", "in-play-area d-inline-block");
#nullable restore
#line 51 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
     if (Computer.WarZone.Cards.Any())
    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(37, "<span class=\"mr-2\">War Zone!</span>");
#nullable restore
#line 54 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        foreach (Card card in Computer.WarZone.Cards)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(38, "img");
            __builder.AddAttribute(39, "class", "playing-card");
            __builder.AddAttribute(40, "src", "/images/cards/" + (
#nullable restore
#line 56 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                           card.IsFaceUp ? card.FrontImage : card.BackImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(41, "title", 
#nullable restore
#line 56 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                       card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "The computer will choose their card when you do"

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(42, "alt", 
#nullable restore
#line 56 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                                                                                                                      card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 57 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(43, "\r\n\r\n<br>\r\n\r\n");
            __builder.OpenElement(44, "div");
            __builder.AddContent(45, "Player Deck (");
            __builder.AddContent(46, 
#nullable restore
#line 63 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                   Player.Deck.Cards.Count

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(47, "):");
            __builder.CloseElement();
            __builder.AddMarkupContent(48, "\r\n\r\n");
            __builder.OpenElement(49, "div");
            __builder.AddAttribute(50, "class", "in-play-area d-inline-block");
            __builder.OpenElement(51, "img");
            __builder.AddAttribute(52, "class", "playing-card");
            __builder.AddAttribute(53, "src", "/images/cards/" + (
#nullable restore
#line 66 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                   Player.Deck.Cards.Any() ? Player.Deck.Cards.Last().BackImage : "blank.png"

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(54, "title", "Your deck");
            __builder.AddAttribute(55, "alt", "back of card");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(56, "\r\n\r\n");
            __builder.OpenElement(57, "div");
            __builder.AddAttribute(58, "class", "in-play-area d-inline-block");
#nullable restore
#line 70 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
     if (Player.InPlay.Cards.Any())
    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(59, "<span class=\"mr-2\">Battle Zone!</span>");
#nullable restore
#line 73 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        foreach (Card card in Player.InPlay.Cards)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(60, "img");
            __builder.AddAttribute(61, "class", "playing-card");
            __builder.AddAttribute(62, "src", "/images/cards/" + (
#nullable restore
#line 75 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                           card.IsFaceUp ? card.FrontImage : card.BackImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(63, "title", 
#nullable restore
#line 75 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                       card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(64, "alt", 
#nullable restore
#line 75 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                                                                                   card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 76 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(65, "\r\n\r\n");
            __builder.OpenElement(66, "div");
            __builder.AddAttribute(67, "class", "in-play-area d-inline-block");
#nullable restore
#line 81 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
     if (Player.WarZone.Cards.Any())
    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(68, "<span class=\"mr-2\">War Zone!</span>");
#nullable restore
#line 84 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        foreach (Card card in Player.WarZone.Cards)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(69, "img");
            __builder.AddAttribute(70, "class", "playing-card");
            __builder.AddAttribute(71, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 86 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                async () => { if (!warRoundAnimationInProgress) { await PlayWarRound(card); }; }

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(72, "src", "/images/cards/" + (
#nullable restore
#line 86 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                       card.IsFaceUp ? card.FrontImage : card.BackImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(73, "title", 
#nullable restore
#line 86 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                                                                                   card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "Click to turn face up"

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(74, "alt", 
#nullable restore
#line 86 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                                                                                                                                                                                                                                                                        card.IsFaceUp ? string.Format("{0} of {1}", card.Name, card.Suit) : "back of card"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 87 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(75, "\r\n\r\n<br>\r\n");
            __builder.OpenElement(76, "button");
            __builder.AddAttribute(77, "type", "button");
            __builder.AddAttribute(78, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 92 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                async () => await DrawCards()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(79, "disabled", 
#nullable restore
#line 92 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                                           endOfRound || warRound

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(80, "Draw Cards!");
            __builder.CloseElement();
            __builder.AddMarkupContent(81, "\r\n");
            __builder.OpenElement(82, "button");
            __builder.AddAttribute(83, "type", "button");
            __builder.AddAttribute(84, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 93 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                () => EndRound()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(85, "disabled", 
#nullable restore
#line 93 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
                                                              !endOfRound || warRound

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(86, "End Round");
            __builder.CloseElement();
            __builder.AddMarkupContent(87, "\r\n\r\n");
            __builder.OpenElement(88, "div");
            __builder.AddAttribute(89, "id", "round-result-text");
            __builder.AddAttribute(90, "class", "text-center font-weight-bold");
            __builder.AddContent(91, 
#nullable restore
#line 96 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
     roundResultText

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 101 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
       

    private Deck deck { get; set; }
    private WarGameParticipant Player { get; set; }
    private WarGameParticipant Computer { get; set; }
    private string roundResultText { get; set; }
    private bool endOfRound { get; set; } = false;
    private bool warRound { get; set; } = false;
    private bool warRoundAnimationInProgress { get; set; } = false;
    private WarGameParticipant roundWinner { get; set; }
    private bool endOfRoundButtonPressed { get; set; } = false;
    CancellationTokenSource source;
    CancellationToken cancellationToken;



    protected override void OnInitialized()
    {
        NewGame();
    }

    private void NewGame()
    {
        deck = new Deck(true);
        Player = new WarGameParticipant();
        Computer = new WarGameParticipant();

        for (var i = deck.Cards.Count - 1; i >= 0; i -= 2)
        {
            var dealtCard = deck.Deal(false);
            Player.Deck.Cards.Add(dealtCard);
            dealtCard = deck.Deal(false);
            Computer.Deck.Cards.Add(dealtCard);
        }
    }

    private async Task DrawCards()
    {
        try
        {
            var computerDrawnCard = Computer.Deck.Deal(true);
            Computer.InPlay.Cards.Add(computerDrawnCard);
            var playerDrawnCard = Player.Deck.Deal(true);
            Player.InPlay.Cards.Add(playerDrawnCard);


            await CompareCards(computerDrawnCard, playerDrawnCard);
        }
        catch (Exception)
        {
            CalculateWinner();
        }
    }

    private async Task CompareCards(Card computerDrawnCard, Card playerDrawnCard)
    {
        if ((playerDrawnCard.Value + 11) % 13 > (computerDrawnCard.Value + 11) % 13)
        {
            roundResultText = "Congratulations! You won the round.";
            StateHasChanged();
            roundWinner = Player;
            await AutoFinishRound();
        }
        else if ((playerDrawnCard.Value + 11) % 13 < (computerDrawnCard.Value + 11) % 13)
        {
            roundResultText = "Unlucky! You lost the round.";
            StateHasChanged();
            roundWinner = Computer;
            await AutoFinishRound();
        }
        else
        {
            roundResultText = "THIS... IS... WAR!";
            StateHasChanged();
            DealWarRound();
        }
    }


    private async Task AutoFinishRound()
    {
        endOfRound = true;
        StateHasChanged();

        endOfRoundButtonPressed = false;


        source = new CancellationTokenSource();
        cancellationToken = source.Token;


        await Task.Delay(2000, cancellationToken);
        if (!endOfRoundButtonPressed)
        {
            EndRound();
        }
    }

    private void EndRound()
    {
        endOfRoundButtonPressed = true;
        source.Cancel();
        warRoundAnimationInProgress = false;

        roundResultText = "";

        foreach (Card card in Computer.InPlay.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        foreach (Card card in Computer.WarZone.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        foreach (Card card in Player.InPlay.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }
        foreach (Card card in Player.WarZone.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        Computer.InPlay = new Hand();
        Player.InPlay = new Hand();
        Computer.WarZone = new Hand();
        Player.WarZone = new Hand();
        endOfRound = false;
    }

    private void DealWarRound()
    {
        try
        {
            warRound = true;
            warRoundAnimationInProgress = false;
            if (Computer.WarZone.Cards.Any())
            {
                foreach (Card card in Computer.WarZone.Cards)
                {
                    Computer.InPlay.Cards.Add(card);
                }
                Computer.WarZone = new Hand();

                foreach (Card card in Player.WarZone.Cards)
                {
                    Player.InPlay.Cards.Add(card);
                }
                Player.WarZone = new Hand();
            }
            for (int i = 0; i < 2; i++)
            {
                Computer.WarZone.Cards.Add(Computer.Deck.Deal(false));
                Player.WarZone.Cards.Add(Player.Deck.Deal(false));
            }
        }
        catch (Exception)
        {
            CalculateWinner();
        }
    }

    private async Task PlayWarRound(Card playerChoice)
    {
        warRoundAnimationInProgress = true;
        playerChoice.IsFaceUp = true;

        var randNum = new Random().Next(1, 2);

        Computer.WarZone.Cards[randNum].IsFaceUp = true;

        await Task.Delay(1000);

        warRound = false;

        await CompareCards(Computer.WarZone.Cards[randNum], playerChoice);
    }

    private void CalculateWinner()
    {
        if (Computer.Deck.Cards.Count > Player.Deck.Cards.Count)
        {
            roundResultText = "Too bad, you've lost this time!";
        }
        else if (Computer.Deck.Cards.Count < Player.Deck.Cards.Count)
        {
            roundResultText = "Congratulations, you've won!";
        }
        else
        {
            roundResultText = "This is a draw!";
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
