// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CardGame.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using CardGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\_Imports.razor"
using CardGame.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 101 "C:\Users\iainp\OneDrive\Github\CardGame\CardGame\Pages\Index.razor"
       

    private Deck deck { get; set; }
    private WarGameParticipant Player { get; set; }
    private WarGameParticipant Computer { get; set; }
    private string roundResultText { get; set; }
    private bool endOfRound { get; set; } = false;
    private bool warRound { get; set; } = false;
    private bool warRoundAnimationInProgress { get; set; } = false;
    private WarGameParticipant roundWinner { get; set; }
    private bool endOfRoundButtonPressed { get; set; } = false;
    CancellationTokenSource source;
    CancellationToken cancellationToken;



    protected override void OnInitialized()
    {
        NewGame();
    }

    private void NewGame()
    {
        deck = new Deck(true);
        Player = new WarGameParticipant();
        Computer = new WarGameParticipant();

        for (var i = deck.Cards.Count - 1; i >= 0; i -= 2)
        {
            var dealtCard = deck.Deal(false);
            Player.Deck.Cards.Add(dealtCard);
            dealtCard = deck.Deal(false);
            Computer.Deck.Cards.Add(dealtCard);
        }
    }

    private async Task DrawCards()
    {
        try
        {
            var computerDrawnCard = Computer.Deck.Deal(true);
            Computer.InPlay.Cards.Add(computerDrawnCard);
            var playerDrawnCard = Player.Deck.Deal(true);
            Player.InPlay.Cards.Add(playerDrawnCard);


            await CompareCards(computerDrawnCard, playerDrawnCard);
        }
        catch (Exception)
        {
            CalculateWinner();
        }
    }

    private async Task CompareCards(Card computerDrawnCard, Card playerDrawnCard)
    {
        if ((playerDrawnCard.Value + 11) % 13 > (computerDrawnCard.Value + 11) % 13)
        {
            roundResultText = "Congratulations! You won the round.";
            StateHasChanged();
            roundWinner = Player;
            await AutoFinishRound();
        }
        else if ((playerDrawnCard.Value + 11) % 13 < (computerDrawnCard.Value + 11) % 13)
        {
            roundResultText = "Unlucky! You lost the round.";
            StateHasChanged();
            roundWinner = Computer;
            await AutoFinishRound();
        }
        else
        {
            roundResultText = "THIS... IS... WAR!";
            StateHasChanged();
            DealWarRound();
        }
    }


    private async Task AutoFinishRound()
    {
        endOfRound = true;
        StateHasChanged();

        endOfRoundButtonPressed = false;


        source = new CancellationTokenSource();
        cancellationToken = source.Token;


        await Task.Delay(2000, cancellationToken);
        if (!endOfRoundButtonPressed)
        {
            EndRound();
        }
    }

    private void EndRound()
    {
        endOfRoundButtonPressed = true;
        source.Cancel();
        warRoundAnimationInProgress = false;

        roundResultText = "";

        foreach (Card card in Computer.InPlay.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        foreach (Card card in Computer.WarZone.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        foreach (Card card in Player.InPlay.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }
        foreach (Card card in Player.WarZone.Cards)
        {
            roundWinner.Deck.Cards.Insert(0, card);
        }

        Computer.InPlay = new Hand();
        Player.InPlay = new Hand();
        Computer.WarZone = new Hand();
        Player.WarZone = new Hand();
        endOfRound = false;
    }

    private void DealWarRound()
    {
        try
        {
            warRound = true;
            warRoundAnimationInProgress = false;
            if (Computer.WarZone.Cards.Any())
            {
                foreach (Card card in Computer.WarZone.Cards)
                {
                    Computer.InPlay.Cards.Add(card);
                }
                Computer.WarZone = new Hand();

                foreach (Card card in Player.WarZone.Cards)
                {
                    Player.InPlay.Cards.Add(card);
                }
                Player.WarZone = new Hand();
            }
            for (int i = 0; i < 2; i++)
            {
                Computer.WarZone.Cards.Add(Computer.Deck.Deal(false));
                Player.WarZone.Cards.Add(Player.Deck.Deal(false));
            }
        }
        catch (Exception)
        {
            CalculateWinner();
        }
    }

    private async Task PlayWarRound(Card playerChoice)
    {
        warRoundAnimationInProgress = true;
        playerChoice.IsFaceUp = true;

        var randNum = new Random().Next(1, 2);

        Computer.WarZone.Cards[randNum].IsFaceUp = true;

        await Task.Delay(1000);

        warRound = false;

        await CompareCards(Computer.WarZone.Cards[randNum], playerChoice);
    }

    private void CalculateWinner()
    {
        if (Computer.Deck.Cards.Count > Player.Deck.Cards.Count)
        {
            roundResultText = "Too bad, you've lost this time!";
        }
        else if (Computer.Deck.Cards.Count < Player.Deck.Cards.Count)
        {
            roundResultText = "Congratulations, you've won!";
        }
        else
        {
            roundResultText = "This is a draw!";
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
